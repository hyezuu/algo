import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
큐말고 일반방법으로 풀기
public class Main {
    public String solution(String s, String str) {
        int lt =0;
        for(char x :str.toCharArray()){
            if(x==s.charAt(lt)){
                if(lt<s.length()-1){
                    lt++;
                }
                else return "YES";
            }
        }
        return "NO";
    }

    public static void main(String[] args) throws Exception {
        Main T = new Main();
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        String s = br.readLine();
        String str = br.readLine();
        bw.write(T.solution(s, str));
        bw.flush();
    }
}
//큐로 풀어보기..
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;

public class Main {
    public String solution(String s, String str) {
        Queue<Character> q = new LinkedList<>();
        for(char x:s.toCharArray()){
            q.offer(x);
        }
        for(char a :str.toCharArray()){
            if(q.peek()==a){
                q.poll();
                if(q.isEmpty()){
                    return "YES";
                }
            }
        }
        return "NO";
    }

    public static void main(String[] args) throws Exception {
        Main T = new Main();
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        String s = br.readLine();
        String str = br.readLine();
        bw.write(T.solution(s, str));
        bw.flush();
    }
}
//update
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;

public class Main {
    public String solution(String s, String str) {
        Queue<Character> q = new LinkedList<>();
        for(char x:s.toCharArray()){
            q.offer(x);
        }
        for(char a :str.toCharArray()){
            if(q.peek()==a){
                q.poll();
                if(q.size()==1){
                    return "YES";
                }
            }
            else if(q.contains(a)){
                return "NO";
            }
        }
        return "NO";
    }

    public static void main(String[] args) throws Exception {
        Main T = new Main();
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        String s = br.readLine();
        String str = br.readLine();
        bw.write(T.solution(s, str));
        bw.flush();
    }
}
//update
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;

public class Main {
    public String solution(String need, String plan) {
        Queue<Character> q = new LinkedList<>();
        for (char x : need.toCharArray()) q.offer(x);
        for (char a : plan.toCharArray()) {
            if (q.contains(a)) {
                if (q.poll() != a) {
                    return "NO";
                }
            }
        }
//        return "YES";
        return q.isEmpty() ? "YES" : "NO";
    }

    public static void main(String[] args) throws Exception {
        Main T = new Main();
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        String need = br.readLine();
        String plan = br.readLine();
        bw.write(T.solution(need, plan));
        bw.flush();
    }
}