import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

/*
그래프 최단거리 (BFS)

다음 그래프에서 1번 정점에서 각 정점으로 가는 최소 이동 간선수를 출력하세요

 1<------2----->5
 | \      ^     ^
 |  \      \   /|
 |   \       V  |
 |    \     / \ |
 V      v  /   \|
 3------>4----->6

입력설명
첫째 줄에는 정점의 수 N(1<=N<=20)와 간선의 수 M가 주어진다. 그 다음부터 M줄에 걸쳐 연결정보가 주어진다.

출력 설명
1번 정점에서 각 정점으로 가는 최소 간선수를 2번 정점부터 차례대로 출력하세요.

입력예제 1
6 9
1 3
1 4
2 1
2 5
3 4
4 5
4 6
6 2
6 5

출력예제 1
2 : 3
3 : 1
4 : 1
5 : 2
6 : 2

 */
public class Main {
    static int N, M;
    static ArrayList<ArrayList<Integer>> graph;
    static boolean[] chk;
    static int[] answer;

    public void BFS(int V) {
        Queue<Integer> Q = new LinkedList<>();
        Q.offer(V);
        int L = 0;
        while (!Q.isEmpty()) {
            int len = Q.size();
            for (int i = 0; i < len; i++) {
                int n = Q.poll();
                answer[n] = L;
                for(int nv : graph.get(n)){
                    if(!chk[nv]){
                        chk[nv] = true;
                        Q.offer(nv);
                    }
                }
            }
            L++;
        }
    }

    public static void main(String[] args) throws IOException {
        Main T = new Main();
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer stk = new StringTokenizer(br.readLine());
        N = Integer.parseInt(stk.nextToken());
        M = Integer.parseInt(stk.nextToken());
        graph = new ArrayList<>();
        for (int i = 0; i <= N; i++) {
            graph.add(new ArrayList<>());
        }
        for (int i=0; i<M; i++){
            StringTokenizer st1 = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st1.nextToken());
            int b = Integer.parseInt(st1.nextToken());
            graph.get(a).add(b);
        }
        chk = new boolean[N + 1];
        answer = new int[N + 1];
        chk[1] = true;
        T.BFS(1);
        for (int i = 2; i <= N; i++) {
            System.out.println(i + " : " + answer[i]);
        }
    }
}
//ref
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

/*
그래프 최단거리 (BFS)

다음 그래프에서 1번 정점에서 각 정점으로 가는 최소 이동 간선수를 출력하세요

 1<------2----->5
 | \      ^     ^
 |  \      \   /|
 |   \       V  |
 |    \     / \ |
 V      v  /   \|
 3------>4----->6

입력설명
첫째 줄에는 정점의 수 N(1<=N<=20)와 간선의 수 M가 주어진다. 그 다음부터 M줄에 걸쳐 연결정보가 주어진다.

출력 설명
1번 정점에서 각 정점으로 가는 최소 간선수를 2번 정점부터 차례대로 출력하세요.

입력예제 1
6 9
1 3
1 4
2 1
2 5
3 4
4 5
4 6
6 2
6 5

출력예제 1
2 : 3
3 : 1
4 : 1
5 : 2
6 : 2

 */
public class Main {
    static int N, M;
    static ArrayList<ArrayList<Integer>> graph;
    static boolean[] chk;
    static int[] dis;

    public void BFS(int v) {
        Queue<Integer> queue = new LinkedList<>();
        chk[v] = true;
        dis[v] = 0;
        queue.offer(v);
        while(!queue.isEmpty()){
            int cv = queue.poll();
            for(int nv : graph.get(cv)){
                if(!chk[nv]){
                    chk[nv] = true;
                    queue.offer(nv);
                    dis[nv]=dis[cv]+1; //현재노드에서 한번만에 갈 수 있으니까!
                }
            }
        }
    }

    public static void main(String[] args) throws IOException {
        Main T = new Main();
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer stk = new StringTokenizer(br.readLine());
        N = Integer.parseInt(stk.nextToken());
        M = Integer.parseInt(stk.nextToken());
        graph = new ArrayList<>();
        for (int i = 0; i <= N; i++) {
            graph.add(new ArrayList<>());
        }
        for (int i=0; i<M; i++){
            StringTokenizer st1 = new StringTokenizer(br.readLine());
            int a = Integer.parseInt(st1.nextToken());
            int b = Integer.parseInt(st1.nextToken());
            graph.get(a).add(b);
        }
        chk = new boolean[N + 1];
        dis = new int[N + 1];
        T.BFS(1);
        for (int i = 2; i <= N; i++) {
            System.out.println(i + " : " + dis[i]);
        }
    }
}